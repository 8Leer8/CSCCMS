# Generated by Django 5.1.5 on 2025-04-23 21:11

import ccscms.models
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('ccscms', '0003_alter_officermember_options_alter_position_options_and_more'),
    ]

    operations = [
        migrations.CreateModel(
            name='PasswordReset',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.EmailField(max_length=254)),
                ('reset_token', models.CharField(max_length=255)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('expires_at', models.DateTimeField()),
            ],
            options={
                'db_table': 'password_reset',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='VisitorLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('user_agent', models.TextField(blank=True, null=True)),
                ('last_active', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'visitor_log',
                'ordering': ['-last_active'],
            },
        ),
        migrations.RemoveField(
            model_name='event',
            name='featured_image',
        ),
        migrations.RemoveField(
            model_name='transparency',
            name='document',
        ),
        migrations.AddField(
            model_name='announcement',
            name='audiences',
            field=models.ManyToManyField(through='ccscms.AnnouncementAudience', to='ccscms.audience'),
        ),
        migrations.AddField(
            model_name='event',
            name='audiences',
            field=models.ManyToManyField(through='ccscms.EventAudience', to='ccscms.audience'),
        ),
        migrations.AddField(
            model_name='event',
            name='event_img',
            field=models.ImageField(blank=True, db_column='event_img', null=True, upload_to=ccscms.models.upload_to),
        ),
        migrations.AddField(
            model_name='event',
            name='labels',
            field=models.ManyToManyField(through='ccscms.EventLabelList', to='ccscms.eventlabel'),
        ),
        migrations.AddField(
            model_name='event',
            name='types',
            field=models.ManyToManyField(through='ccscms.EventTypeList', to='ccscms.eventtype'),
        ),
        migrations.AddField(
            model_name='transparency',
            name='document_url',
            field=models.CharField(blank=True, max_length=255, null=True),
        ),
        migrations.AlterField(
            model_name='account',
            name='groups',
            field=models.ManyToManyField(blank=True, related_name='account_groups', related_query_name='account', to='auth.group', verbose_name='groups'),
        ),
        migrations.AlterField(
            model_name='account',
            name='last_login',
            field=models.DateTimeField(blank=True, default=None, null=True),
        ),
        migrations.AlterField(
            model_name='account',
            name='password',
            field=models.CharField(max_length=255),
        ),
        migrations.AlterField(
            model_name='account',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, related_name='account_permissions', related_query_name='account', to='auth.permission', verbose_name='user permissions'),
        ),
        migrations.AlterField(
            model_name='admin',
            name='account',
            field=models.OneToOneField(db_column='admin_id', on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterField(
            model_name='announcementaudience',
            name='announcement',
            field=models.ForeignKey(db_column='announcement_id', on_delete=django.db.models.deletion.CASCADE, to='ccscms.announcement'),
        ),
        migrations.AlterField(
            model_name='announcementaudience',
            name='audience',
            field=models.ForeignKey(db_column='audience_id', on_delete=django.db.models.deletion.CASCADE, to='ccscms.audience'),
        ),
        migrations.AlterField(
            model_name='event',
            name='admin',
            field=models.ForeignKey(db_column='admin_id', on_delete=django.db.models.deletion.PROTECT, to='ccscms.admin'),
        ),
        migrations.AlterField(
            model_name='eventaudience',
            name='audience',
            field=models.ForeignKey(db_column='audience_id', on_delete=django.db.models.deletion.CASCADE, to='ccscms.audience'),
        ),
        migrations.AlterField(
            model_name='eventaudience',
            name='event',
            field=models.ForeignKey(db_column='event_id', on_delete=django.db.models.deletion.CASCADE, to='ccscms.event'),
        ),
        migrations.AlterField(
            model_name='eventlabellist',
            name='event',
            field=models.ForeignKey(db_column='event_id', on_delete=django.db.models.deletion.CASCADE, to='ccscms.event'),
        ),
        migrations.AlterField(
            model_name='eventlabellist',
            name='event_label',
            field=models.ForeignKey(db_column='event_label_id', on_delete=django.db.models.deletion.CASCADE, to='ccscms.eventlabel'),
        ),
        migrations.AlterField(
            model_name='eventtypelist',
            name='event',
            field=models.ForeignKey(db_column='event_id', on_delete=django.db.models.deletion.CASCADE, to='ccscms.event'),
        ),
        migrations.AlterField(
            model_name='eventtypelist',
            name='event_type',
            field=models.ForeignKey(db_column='event_type_id', on_delete=django.db.models.deletion.CASCADE, to='ccscms.eventtype'),
        ),
        migrations.AlterField(
            model_name='user',
            name='account',
            field=models.OneToOneField(db_column='user_id', on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterField(
            model_name='volunteerannouncement',
            name='announcement',
            field=models.ForeignKey(db_column='announcement_id', on_delete=django.db.models.deletion.CASCADE, to='ccscms.announcement'),
        ),
        migrations.AlterField(
            model_name='volunteerannouncement',
            name='volunteer',
            field=models.ForeignKey(db_column='volunteer_id', on_delete=django.db.models.deletion.CASCADE, to='ccscms.volunteer'),
        ),
        migrations.AlterField(
            model_name='volunteerevent',
            name='event',
            field=models.ForeignKey(db_column='event_id', on_delete=django.db.models.deletion.CASCADE, to='ccscms.event'),
        ),
        migrations.AlterField(
            model_name='volunteerevent',
            name='volunteer',
            field=models.ForeignKey(db_column='volunteer_id', on_delete=django.db.models.deletion.CASCADE, to='ccscms.volunteer'),
        ),
        migrations.CreateModel(
            name='Feedback',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rating', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('comment', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='ccscms.user')),
            ],
            options={
                'db_table': 'feedback',
                'ordering': ['-created_at'],
            },
        ),
    ]
