# Generated by Django 5.1.5 on 2025-04-15 22:08

import ccscms.models
import django.contrib.auth.models
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Account',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email address')),
                ('lastname', models.CharField(max_length=100)),
                ('firstname', models.CharField(max_length=100)),
                ('middlename', models.CharField(blank=True, max_length=100, null=True)),
                ('contact_number', models.CharField(max_length=20, validators=[django.core.validators.RegexValidator(message="Phone number must be entered in the format: '+999999999'. Up to 15 digits allowed.", regex='^\\+?1?\\d{9,15}$')])),
                ('profile_img', models.ImageField(blank=True, null=True, upload_to=ccscms.models.upload_to)),
                ('account_type', models.CharField(choices=[('user', 'User'), ('admin', 'Admin')], max_length=10)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('last_login', models.DateTimeField(blank=True, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='account_groups', related_query_name='account', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='account_permissions', related_query_name='account', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Account',
                'verbose_name_plural': 'Accounts',
                'db_table': 'account',
                'ordering': ['-created_at'],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Accomplishment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True)),
                ('title', models.CharField(max_length=255)),
                ('context', models.TextField()),
                ('content', models.TextField()),
                ('accomplish_on', models.DateField()),
                ('impact', models.TextField(blank=True, null=True)),
                ('recognition', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'accomplishment',
                'ordering': ['-accomplish_on'],
            },
        ),
        migrations.CreateModel(
            name='Achievement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True)),
                ('title', models.CharField(max_length=255)),
                ('context', models.TextField()),
                ('content', models.TextField()),
                ('awarded_by', models.CharField(max_length=100)),
                ('awarded_on', models.DateField()),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'achievement',
                'ordering': ['-awarded_on'],
            },
        ),
        migrations.CreateModel(
            name='Announcement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True)),
                ('title', models.CharField(max_length=255)),
                ('context', models.TextField()),
                ('content', models.TextField()),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('status', models.CharField(choices=[('expired', 'Expired'), ('active', 'Active'), ('scheduled', 'Scheduled')], default='active', max_length=10)),
                ('start_publish_on', models.DateField()),
                ('end_publish_on', models.DateField()),
            ],
            options={
                'db_table': 'announcement',
                'ordering': ['-start_publish_on'],
            },
        ),
        migrations.CreateModel(
            name='Audience',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True)),
                ('type', models.CharField(choices=[('students', 'Students'), ('faculty', 'Faculty'), ('staff', 'Staff'), ('public', 'Public'), ('members', 'Members')], max_length=50)),
                ('description', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'audience',
                'ordering': ['type'],
            },
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True)),
                ('category', models.CharField(choices=[('news', 'News'), ('event', 'Event'), ('achievement', 'Achievement'), ('announcement', 'Announcement'), ('transparency', 'Transparency')], max_length=50)),
                ('description', models.TextField(blank=True, null=True)),
            ],
            options={
                'verbose_name_plural': 'categories',
                'db_table': 'category',
                'ordering': ['category'],
            },
        ),
        migrations.CreateModel(
            name='College',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True)),
                ('name', models.CharField(max_length=100)),
                ('college_code', models.CharField(max_length=20, unique=True, validators=[django.core.validators.RegexValidator(message='College code must be uppercase letters', regex='^[A-Z]{2,10}$')])),
                ('description', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'college',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Committee',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True)),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name_plural': 'committees',
                'db_table': 'committee',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='ComplaintType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True)),
                ('type', models.CharField(choices=[('facility', 'Facility Issue'), ('harassment', 'Harassment'), ('academic', 'Academic Concern'), ('other', 'Other')], max_length=50)),
                ('description', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'complaint_type',
                'ordering': ['type'],
            },
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True)),
                ('name', models.CharField(max_length=100)),
                ('context', models.TextField()),
                ('description', models.TextField()),
                ('featured_image', models.ImageField(upload_to=ccscms.models.upload_to)),
                ('landmark', models.CharField(blank=True, max_length=100, null=True)),
                ('location', models.CharField(max_length=255)),
                ('start_at', models.TimeField()),
                ('end_at', models.TimeField()),
                ('date_event', models.DateField()),
                ('status', models.CharField(choices=[('expired', 'Expired'), ('active', 'Active'), ('scheduled', 'Scheduled')], default='active', max_length=10)),
                ('start_publish_on', models.DateField()),
                ('end_publish_on', models.DateField()),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'event',
                'ordering': ['-date_event', '-start_at'],
            },
        ),
        migrations.CreateModel(
            name='EventLabel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True)),
                ('type', models.CharField(choices=[('academic', 'Academic'), ('social', 'Social'), ('sports', 'Sports'), ('cultural', 'Cultural'), ('workshop', 'Workshop')], max_length=50)),
                ('description', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'event_label',
                'ordering': ['type'],
            },
        ),
        migrations.CreateModel(
            name='EventType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True)),
                ('type', models.CharField(choices=[('conference', 'Conference'), ('seminar', 'Seminar'), ('meeting', 'Meeting'), ('exhibition', 'Exhibition'), ('competition', 'Competition')], max_length=50)),
                ('description', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'event_type',
                'ordering': ['type'],
            },
        ),
        migrations.CreateModel(
            name='GalleryPost',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True)),
                ('title', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'gallery_post',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Position',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True)),
                ('name', models.CharField(choices=[('president', 'President'), ('vice_president', 'Vice President'), ('secretary', 'Secretary'), ('treasurer', 'Treasurer'), ('member', 'Member'), ('faculty', 'Faculty'), ('staff', 'Staff')], max_length=100)),
                ('abbreviation', models.CharField(blank=True, max_length=20, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('hierarchy_level', models.PositiveSmallIntegerField(default=0)),
            ],
            options={
                'db_table': 'position',
                'ordering': ['hierarchy_level', 'name'],
            },
        ),
        migrations.CreateModel(
            name='Status',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True)),
                ('type', models.CharField(choices=[('active', 'Active'), ('inactive', 'Inactive'), ('pending', 'Pending'), ('completed', 'Completed'), ('archived', 'Archived')], max_length=50)),
                ('description', models.TextField(blank=True, null=True)),
            ],
            options={
                'verbose_name_plural': 'statuses',
                'db_table': 'status',
                'ordering': ['type'],
            },
        ),
        migrations.CreateModel(
            name='Admin',
            fields=[
                ('is_active', models.BooleanField(default=True)),
                ('account', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('adminname', models.CharField(max_length=50, unique=True)),
                ('admin_type', models.CharField(choices=[('head-admin', 'Head Admin'), ('admin', 'Admin')], max_length=10)),
            ],
            options={
                'db_table': 'admin',
                'ordering': ['admin_type', 'account__lastname'],
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('is_active', models.BooleanField(default=True)),
                ('account', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('username', models.CharField(max_length=50, unique=True)),
                ('student_number', models.CharField(max_length=20, unique=True, validators=[django.core.validators.RegexValidator(message='Student number must be numeric', regex='^[0-9]{8,20}$')])),
                ('COR_img', models.ImageField(upload_to=ccscms.models.upload_to)),
            ],
            options={
                'db_table': 'user',
                'ordering': ['account__lastname', 'account__firstname'],
            },
        ),
        migrations.CreateModel(
            name='AccomplishmentImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True)),
                ('image', models.ImageField(upload_to=ccscms.models.upload_to)),
                ('caption', models.CharField(blank=True, max_length=255, null=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('accomplishment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='accomplishment_images', to='ccscms.accomplishment')),
            ],
            options={
                'db_table': 'accomplishment_image',
                'ordering': ['accomplishment', '-created_at'],
            },
        ),
        migrations.AddField(
            model_name='accomplishment',
            name='images',
            field=models.ManyToManyField(related_name='accomplishments', to='ccscms.accomplishmentimage'),
        ),
        migrations.CreateModel(
            name='AchievementImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True)),
                ('image', models.ImageField(upload_to=ccscms.models.upload_to)),
                ('caption', models.CharField(blank=True, max_length=255, null=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('achievement', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='achievement_images', to='ccscms.achievement')),
            ],
            options={
                'db_table': 'achievement_image',
                'ordering': ['achievement', '-created_at'],
            },
        ),
        migrations.AddField(
            model_name='achievement',
            name='images',
            field=models.ManyToManyField(related_name='achievements', to='ccscms.achievementimage'),
        ),
        migrations.CreateModel(
            name='AnnouncementAudience',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('announcement', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ccscms.announcement')),
                ('audience', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ccscms.audience')),
            ],
            options={
                'db_table': 'announcement_audience_list',
            },
        ),
        migrations.AddField(
            model_name='announcement',
            name='audiences',
            field=models.ManyToManyField(through='ccscms.AnnouncementAudience', to='ccscms.audience'),
        ),
        migrations.CreateModel(
            name='AuditLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action', models.CharField(choices=[('create', 'Create'), ('update', 'Update'), ('delete', 'Delete'), ('login', 'Login'), ('logout', 'Logout')], max_length=10)),
                ('model_name', models.CharField(max_length=100)),
                ('record_id', models.IntegerField(blank=True, null=True)),
                ('changes', models.JSONField(blank=True, null=True)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('user_agent', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'audit_log',
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddField(
            model_name='announcement',
            name='category',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='ccscms.category'),
        ),
        migrations.AddField(
            model_name='achievement',
            name='category',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='ccscms.category'),
        ),
        migrations.AddField(
            model_name='accomplishment',
            name='category',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='ccscms.category'),
        ),
        migrations.CreateModel(
            name='CommitteeMember',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True)),
                ('lastname', models.CharField(max_length=100)),
                ('firstname', models.CharField(max_length=100)),
                ('middlename', models.CharField(blank=True, max_length=100, null=True)),
                ('role', models.CharField(max_length=100)),
                ('contact_number', models.CharField(max_length=20)),
                ('email', models.EmailField(max_length=254)),
                ('joined_at', models.DateField()),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('committee', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='members', to='ccscms.committee')),
            ],
            options={
                'db_table': 'committee_member',
                'ordering': ['committee', 'role', 'lastname'],
            },
        ),
        migrations.CreateModel(
            name='Department',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True)),
                ('name', models.CharField(max_length=100)),
                ('depart_code', models.CharField(max_length=20, unique=True, validators=[django.core.validators.RegexValidator(message='Department code must be uppercase letters', regex='^[A-Z]{2,10}$')])),
                ('description', models.TextField(blank=True, null=True)),
                ('college', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='departments', to='ccscms.college')),
            ],
            options={
                'db_table': 'department',
                'ordering': ['college', 'name'],
            },
        ),
        migrations.CreateModel(
            name='EventAudience',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('audience', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ccscms.audience')),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ccscms.event')),
            ],
            options={
                'db_table': 'event_audience_list',
            },
        ),
        migrations.AddField(
            model_name='event',
            name='audiences',
            field=models.ManyToManyField(through='ccscms.EventAudience', to='ccscms.audience'),
        ),
        migrations.CreateModel(
            name='EventLabelList',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ccscms.event')),
                ('event_label', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ccscms.eventlabel')),
            ],
            options={
                'db_table': 'event_label_list',
            },
        ),
        migrations.AddField(
            model_name='event',
            name='labels',
            field=models.ManyToManyField(through='ccscms.EventLabelList', to='ccscms.eventlabel'),
        ),
        migrations.CreateModel(
            name='EventTypeList',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ccscms.event')),
                ('event_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ccscms.eventtype')),
            ],
            options={
                'db_table': 'event_type_list',
            },
        ),
        migrations.AddField(
            model_name='event',
            name='types',
            field=models.ManyToManyField(through='ccscms.EventTypeList', to='ccscms.eventtype'),
        ),
        migrations.CreateModel(
            name='GalleryPostImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True)),
                ('image', models.ImageField(upload_to=ccscms.models.upload_to)),
                ('caption', models.CharField(blank=True, max_length=255, null=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('gallery_post', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='images', to='ccscms.gallerypost')),
            ],
            options={
                'db_table': 'gallery_post_image',
                'ordering': ['gallery_post', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Officer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True)),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True, null=True)),
                ('status', models.CharField(choices=[('present', 'Present'), ('past', 'Past')], default='present', max_length=10)),
                ('supervisor_img', models.ImageField(blank=True, null=True, upload_to=ccscms.models.upload_to)),
                ('message', models.TextField(blank=True, null=True)),
                ('start_in_sy', models.CharField(max_length=20)),
                ('end_in_sy', models.CharField(max_length=20)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('supervisor', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='subordinates', to='ccscms.officer')),
            ],
            options={
                'db_table': 'officer',
                'ordering': ['status', 'name'],
            },
        ),
        migrations.AddField(
            model_name='achievement',
            name='officer',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='ccscms.officer'),
        ),
        migrations.AddField(
            model_name='accomplishment',
            name='officer',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='ccscms.officer'),
        ),
        migrations.CreateModel(
            name='OfficerMember',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True)),
                ('lastname', models.CharField(max_length=100)),
                ('firstname', models.CharField(max_length=100)),
                ('middlename', models.CharField(blank=True, max_length=100, null=True)),
                ('profile_img', models.ImageField(blank=True, null=True, upload_to=ccscms.models.upload_to)),
                ('bio', models.TextField(blank=True, null=True)),
                ('start_term', models.DateField()),
                ('end_term', models.DateField()),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('department', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='ccscms.department')),
                ('officer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='members', to='ccscms.officer')),
                ('position', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='ccscms.position')),
            ],
            options={
                'db_table': 'officer_member',
                'ordering': ['officer', 'position__hierarchy_level', 'lastname'],
            },
        ),
        migrations.CreateModel(
            name='Faculty',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True)),
                ('lastname', models.CharField(max_length=100)),
                ('firstname', models.CharField(max_length=100)),
                ('middlename', models.CharField(blank=True, max_length=100, null=True)),
                ('designation', models.CharField(max_length=100)),
                ('degree', models.CharField(max_length=100)),
                ('specialty', models.CharField(max_length=100)),
                ('faculty_img', models.ImageField(blank=True, null=True, upload_to=ccscms.models.upload_to)),
                ('office_location', models.CharField(max_length=255)),
                ('contact_number', models.CharField(max_length=20)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('account', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('college', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='ccscms.college')),
                ('department', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='ccscms.department')),
                ('position', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='ccscms.position')),
            ],
            options={
                'verbose_name_plural': 'faculty',
                'db_table': 'faculty',
                'ordering': ['lastname', 'firstname'],
            },
        ),
        migrations.CreateModel(
            name='Post',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True)),
                ('title', models.CharField(max_length=255)),
                ('context', models.TextField()),
                ('content', models.TextField()),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('status', models.CharField(choices=[('expired', 'Expired'), ('active', 'Active'), ('scheduled', 'Scheduled')], default='active', max_length=10)),
                ('start_publish_on', models.DateField()),
                ('end_publish_on', models.DateField()),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='ccscms.category')),
                ('admin', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='ccscms.admin')),
            ],
            options={
                'db_table': 'post',
                'ordering': ['-start_publish_on'],
            },
        ),
        migrations.CreateModel(
            name='PostImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True)),
                ('image', models.ImageField(upload_to=ccscms.models.upload_to)),
                ('caption', models.CharField(blank=True, max_length=255, null=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('post', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='images', to='ccscms.post')),
            ],
            options={
                'db_table': 'post_image',
                'ordering': ['post', '-created_at'],
            },
        ),
        migrations.AddField(
            model_name='achievement',
            name='status',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='ccscms.status'),
        ),
        migrations.AddField(
            model_name='accomplishment',
            name='status',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='ccscms.status'),
        ),
        migrations.CreateModel(
            name='Volunteer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True)),
                ('skills', models.TextField(blank=True, null=True)),
                ('interests', models.TextField(blank=True, null=True)),
                ('availability', models.CharField(blank=True, max_length=255, null=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('status', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='ccscms.status')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ccscms.user')),
            ],
            options={
                'db_table': 'volunteer',
                'ordering': ['user__account__lastname', 'user__account__firstname'],
            },
        ),
        migrations.CreateModel(
            name='VolunteerAnnouncement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('assigned_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('notes', models.TextField(blank=True, null=True)),
                ('announcement', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ccscms.announcement')),
                ('volunteer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ccscms.volunteer')),
            ],
            options={
                'db_table': 'volunteer_announcement_list',
            },
        ),
        migrations.CreateModel(
            name='VolunteerEvent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('assigned_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('role', models.CharField(blank=True, max_length=100, null=True)),
                ('notes', models.TextField(blank=True, null=True)),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ccscms.event')),
                ('volunteer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ccscms.volunteer')),
            ],
            options={
                'db_table': 'volunteer_event_list',
            },
        ),
        migrations.CreateModel(
            name='Transparency',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True)),
                ('title', models.CharField(max_length=255)),
                ('context', models.TextField()),
                ('description', models.TextField()),
                ('date', models.DateField()),
                ('document', models.FileField(upload_to=ccscms.models.upload_to)),
                ('image', models.ImageField(blank=True, null=True, upload_to=ccscms.models.upload_to)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='ccscms.category')),
                ('status', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='ccscms.status')),
                ('admin', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='ccscms.admin')),
            ],
            options={
                'verbose_name_plural': 'transparency documents',
                'db_table': 'transparency',
                'ordering': ['-date'],
            },
        ),
        migrations.AddField(
            model_name='gallerypost',
            name='admin',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='ccscms.admin'),
        ),
        migrations.AddField(
            model_name='event',
            name='admin',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='ccscms.admin'),
        ),
        migrations.AddField(
            model_name='announcement',
            name='admin',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='ccscms.admin'),
        ),
        migrations.AddField(
            model_name='achievement',
            name='admin',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='ccscms.admin'),
        ),
        migrations.AddField(
            model_name='accomplishment',
            name='admin',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='ccscms.admin'),
        ),
        migrations.CreateModel(
            name='Complaint',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True)),
                ('other_info', models.TextField(blank=True, null=True)),
                ('description', models.TextField()),
                ('complain_img', models.ImageField(blank=True, null=True, upload_to=ccscms.models.upload_to)),
                ('remarks', models.CharField(choices=[('pending', 'Pending'), ('solved', 'Solved')], default='pending', max_length=10)),
                ('remark_info', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('resolved_at', models.DateTimeField(blank=True, null=True)),
                ('complaint_type', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='ccscms.complainttype')),
                ('admin', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='ccscms.admin')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ccscms.user')),
            ],
            options={
                'db_table': 'complaint',
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddIndex(
            model_name='account',
            index=models.Index(fields=['email'], name='account_email_58259d_idx'),
        ),
        migrations.AddIndex(
            model_name='account',
            index=models.Index(fields=['lastname', 'firstname'], name='account_lastnam_625da4_idx'),
        ),
        migrations.AddIndex(
            model_name='account',
            index=models.Index(fields=['account_type'], name='account_account_1922e5_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='announcementaudience',
            unique_together={('announcement', 'audience')},
        ),
        migrations.AddIndex(
            model_name='auditlog',
            index=models.Index(fields=['user'], name='audit_log_user_id_4dac76_idx'),
        ),
        migrations.AddIndex(
            model_name='auditlog',
            index=models.Index(fields=['action'], name='audit_log_action_b32d4d_idx'),
        ),
        migrations.AddIndex(
            model_name='auditlog',
            index=models.Index(fields=['model_name'], name='audit_log_model_n_d0c22c_idx'),
        ),
        migrations.AddIndex(
            model_name='auditlog',
            index=models.Index(fields=['created_at'], name='audit_log_created_5a7975_idx'),
        ),
        migrations.AddIndex(
            model_name='committeemember',
            index=models.Index(fields=['committee'], name='committee_m_committ_9b316a_idx'),
        ),
        migrations.AddIndex(
            model_name='committeemember',
            index=models.Index(fields=['email'], name='committee_m_email_fc749c_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='eventaudience',
            unique_together={('event', 'audience')},
        ),
        migrations.AlterUniqueTogether(
            name='eventlabellist',
            unique_together={('event', 'event_label')},
        ),
        migrations.AlterUniqueTogether(
            name='eventtypelist',
            unique_together={('event', 'event_type')},
        ),
        migrations.AddIndex(
            model_name='officer',
            index=models.Index(fields=['status'], name='officer_status_13d492_idx'),
        ),
        migrations.AddIndex(
            model_name='officer',
            index=models.Index(fields=['supervisor'], name='officer_supervi_92b2e1_idx'),
        ),
        migrations.AddIndex(
            model_name='officermember',
            index=models.Index(fields=['officer'], name='officer_mem_officer_443c6b_idx'),
        ),
        migrations.AddIndex(
            model_name='officermember',
            index=models.Index(fields=['position'], name='officer_mem_positio_85b928_idx'),
        ),
        migrations.AddIndex(
            model_name='officermember',
            index=models.Index(fields=['department'], name='officer_mem_departm_993589_idx'),
        ),
        migrations.AddIndex(
            model_name='officermember',
            index=models.Index(fields=['lastname', 'firstname'], name='officer_mem_lastnam_9f773b_idx'),
        ),
        migrations.AddIndex(
            model_name='faculty',
            index=models.Index(fields=['email'], name='faculty_email_fe554a_idx'),
        ),
        migrations.AddIndex(
            model_name='faculty',
            index=models.Index(fields=['college', 'department'], name='faculty_college_f6d861_idx'),
        ),
        migrations.AddIndex(
            model_name='faculty',
            index=models.Index(fields=['lastname', 'firstname'], name='faculty_lastnam_aa48d7_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='volunteerannouncement',
            unique_together={('volunteer', 'announcement')},
        ),
        migrations.AlterUniqueTogether(
            name='volunteerevent',
            unique_together={('volunteer', 'event')},
        ),
        migrations.AddIndex(
            model_name='transparency',
            index=models.Index(fields=['category'], name='transparenc_categor_873e19_idx'),
        ),
        migrations.AddIndex(
            model_name='transparency',
            index=models.Index(fields=['status'], name='transparenc_status__34260a_idx'),
        ),
        migrations.AddIndex(
            model_name='post',
            index=models.Index(fields=['category'], name='post_categor_4e0ece_idx'),
        ),
        migrations.AddIndex(
            model_name='post',
            index=models.Index(fields=['status'], name='post_status_0fcf65_idx'),
        ),
        migrations.AddIndex(
            model_name='post',
            index=models.Index(fields=['start_publish_on', 'end_publish_on'], name='post_start_p_500130_idx'),
        ),
        migrations.AddIndex(
            model_name='event',
            index=models.Index(fields=['status'], name='event_status_c263a9_idx'),
        ),
        migrations.AddIndex(
            model_name='event',
            index=models.Index(fields=['date_event'], name='event_date_ev_ab02e3_idx'),
        ),
        migrations.AddIndex(
            model_name='event',
            index=models.Index(fields=['start_publish_on', 'end_publish_on'], name='event_start_p_e3b183_idx'),
        ),
        migrations.AddIndex(
            model_name='announcement',
            index=models.Index(fields=['category'], name='announcemen_categor_bd962e_idx'),
        ),
        migrations.AddIndex(
            model_name='announcement',
            index=models.Index(fields=['status'], name='announcemen_status_62c323_idx'),
        ),
        migrations.AddIndex(
            model_name='announcement',
            index=models.Index(fields=['start_publish_on', 'end_publish_on'], name='announcemen_start_p_fd60c1_idx'),
        ),
        migrations.AddIndex(
            model_name='achievement',
            index=models.Index(fields=['category'], name='achievement_categor_40cc7b_idx'),
        ),
        migrations.AddIndex(
            model_name='achievement',
            index=models.Index(fields=['status'], name='achievement_status__49607e_idx'),
        ),
        migrations.AddIndex(
            model_name='achievement',
            index=models.Index(fields=['officer'], name='achievement_officer_10448a_idx'),
        ),
        migrations.AddIndex(
            model_name='accomplishment',
            index=models.Index(fields=['category'], name='accomplishm_categor_a4b916_idx'),
        ),
        migrations.AddIndex(
            model_name='accomplishment',
            index=models.Index(fields=['status'], name='accomplishm_status__c7a68c_idx'),
        ),
        migrations.AddIndex(
            model_name='accomplishment',
            index=models.Index(fields=['officer'], name='accomplishm_officer_e85cc1_idx'),
        ),
        migrations.AddIndex(
            model_name='volunteer',
            index=models.Index(fields=['user'], name='volunteer_user_id_fe9610_idx'),
        ),
        migrations.AddIndex(
            model_name='volunteer',
            index=models.Index(fields=['status'], name='volunteer_status__d16ac2_idx'),
        ),
        migrations.AddIndex(
            model_name='complaint',
            index=models.Index(fields=['user'], name='complaint_user_id_ce855c_idx'),
        ),
        migrations.AddIndex(
            model_name='complaint',
            index=models.Index(fields=['complaint_type'], name='complaint_complai_9d21d8_idx'),
        ),
        migrations.AddIndex(
            model_name='complaint',
            index=models.Index(fields=['remarks'], name='complaint_remarks_16f3ae_idx'),
        ),
        migrations.AddIndex(
            model_name='complaint',
            index=models.Index(fields=['created_at'], name='complaint_created_10f00d_idx'),
        ),
    ]
